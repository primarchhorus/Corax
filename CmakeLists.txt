cmake_minimum_required(VERSION 3.20)
project(VulkanTutorial)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(CMAKE_OSX_ARCHITECTURES "arm64")

    if(CMAKE_SYSTEM_PROCESSOR MATCHES "arm64")
        add_compile_options(-arch arm64)
    endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set(CMAKE_OSX_ARCHITECTURES "x64")
    set(VULKAN_SDK "C:/VulkanSDK/1.3.296.0")
    set(GLFW_SDK "C:/glfw-3.4.bin.WIN64/glfw-3.4.bin.WIN64")
    set(CMAKE_C_COMPILER "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.42.34433/bin/Hostx64/x64/cl.exe")
    set(CMAKE_CXX_COMPILER "C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.42.34433/bin/Hostx64/x64/cl.exe")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MD")
endif()

# Add executable
add_executable(${PROJECT_NAME}
    src/main.cpp
    src/window.cpp
    src/device.cpp
    src/instance.cpp
    src/swap_chain.cpp
    src/pipeline.cpp
    src/frame_sync.cpp
    src/dynamic_rendering.cpp
    src/vma_guard.cpp
    src/mesh.cpp
    src/resource_manager.cpp
    src/vulkan_operations.cpp
    src/material.cpp
    src/camera.cpp
    src/events.cpp
    src/corax.cpp
)

# --- ADD THIRD-PARTY LIBRARIES ---

# Add fastgltf
add_subdirectory(third-party/fastgltf)

# Add KTX-Software (libktx)
set(KTX_FEATURE_STATIC ON CACHE BOOL "" FORCE) # Build static libktx
set(KTX_FEATURE_TOOLS OFF CACHE BOOL "" FORCE) # Disable tools (only library needed)
set(KTX_FEATURE_TESTS OFF CACHE BOOL "" FORCE) # Disable tests

add_subdirectory(third-party/KTX-Software)

# Include directories
target_include_directories(${PROJECT_NAME} PRIVATE
    ${CMAKE_SOURCE_DIR}/src
    ${VULKAN_SDK}/Include
    ${GLFW_SDK}/include
    ${CMAKE_SOURCE_DIR}/third-party/fastgltf/include
    ${CMAKE_SOURCE_DIR}/third-party/stb
    ${CMAKE_SOURCE_DIR}/third-party/KTX-Software/include
)

# Link libraries
target_link_libraries(${PROJECT_NAME} PRIVATE
    ${VULKAN_SDK}/Lib/vulkan-1.lib
    ${GLFW_SDK}/lib-vc2022/glfw3.lib
    fastgltf::fastgltf
    ktx
)

# --- SHADER COMPILATION FUNCTION ---
function(compile_shaders SHADER_SOURCE_DIR SHADER_BINARY_DIR)
    find_program(GLSLANG_VALIDATOR glslangValidator
        HINTS $ENV{VULKAN_SDK}/bin)

    if(NOT GLSLANG_VALIDATOR)
        message(FATAL_ERROR "glslangValidator not found!")
    endif()

    message(STATUS "Shader source dir: ${SHADER_SOURCE_DIR}")
    message(STATUS "Shader binary dir: ${SHADER_BINARY_DIR}")
    
    file(GLOB SHADER_SOURCES
        ${SHADER_SOURCE_DIR}/*.vert
        ${SHADER_SOURCE_DIR}/*.frag
        ${SHADER_SOURCE_DIR}/*.comp
    )

    file(MAKE_DIRECTORY ${SHADER_BINARY_DIR})

    foreach(SHADER ${SHADER_SOURCES})
        get_filename_component(SHADER_NAME ${SHADER} NAME)
        set(SPIRV_OUTPUT "${SHADER_BINARY_DIR}/${SHADER_NAME}.spv")
        message(STATUS "Compiling shader: ${SPIRV_OUTPUT}")

        add_custom_command(
            OUTPUT ${SPIRV_OUTPUT}
            COMMAND ${GLSLANG_VALIDATOR} -V ${SHADER} -o ${SPIRV_OUTPUT}
            DEPENDS ${SHADER}
        )

        list(APPEND SPIRV_BINARY_FILES ${SPIRV_OUTPUT})
    endforeach()

    add_custom_target(shaders ALL DEPENDS ${SPIRV_BINARY_FILES})
endfunction()

set(SHADER_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src/shaders")
set(SHADER_BINARY_DIR "${CMAKE_CURRENT_SOURCE_DIR}/build/shaders")
compile_shaders(${SHADER_SOURCE_DIR} ${SHADER_BINARY_DIR})
